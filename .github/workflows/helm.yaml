name: 'Helm - Validations'

env:
  HELM_CHART: "jenkins-ci"

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  lint-with-dry-install:
    name: 'Helm: Lint with Dry Run Installation'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Helm dependency update
        id: dependency-update
        run: |
          helm dependency update ${{ env.HELM_CHART }}

      - name: Helm dependency list
        id: dependency-list
        run: |
          helm dependency list ${{ env.HELM_CHART }}

      - name: Run lint
        id: lint
        run: helm lint ${{ env.HELM_CHART }}
      
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Helm valications')
            })
            
            // 2. Prepare format of the comment
            const output = `### Helm valications
            #### Helm Dependency List:
            <details><summary>Validation Output</summary>
            
            \`\`\`\n
            ${{ steps.dependency-list.outputs.stdout }}
            \`\`\`
            
            </details>
            ${{ steps.dependency-list.outputs.stdout }}
            #### Helm Lint:
            ${{ steps.lint.outputs.stdout }}
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }